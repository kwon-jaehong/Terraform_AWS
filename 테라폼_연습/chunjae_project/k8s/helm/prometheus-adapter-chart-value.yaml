prometheus:
  url: http://stack-kube-prometheus-stac-prometheus.monitoring.svc
nodeSelector:
  eks.amazonaws.com/nodegroup: admin_node_group
rules:
  custom:
    - seriesQuery: 'neuroncore_utilization_ratio{namespace!="",pod!=""}'
      resources:
        overrides:
          namespace:
            resource: namespace
          pod: 
            resource: pod
      name:
        matches: ^(.*)
        as: "nr"
      metricsQuery: 'sum(avg_over_time(<<.Series>>{<<.LabelMatchers>>,using="True"}[15s])) by (<<.GroupBy>>) / 1000'
      # metricsQuery: 'avg(<<.Series>>{<<.LabelMatchers>>,using="True"}) by (<<.GroupBy>>) / 1000'
      # sum(avg_over_time(neuroncore_utilization_ratio{namespace!="",pod!="",using="True"}[30s])) by (name,pod) / 1000



  resource:
    cpu:
      containerQuery: |
        sum by (<<.GroupBy>>) (
          rate(container_cpu_usage_seconds_total{container!="",<<.LabelMatchers>>}[3m])
        )
      nodeQuery: |
        sum  by (<<.GroupBy>>) (
          rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",<<.LabelMatchers>>}[3m])
        )
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    memory:
      containerQuery: |
        sum by (<<.GroupBy>>) (
          avg_over_time(container_memory_working_set_bytes{container!="",<<.LabelMatchers>>}[3m])
        )
      nodeQuery: |
        sum by (<<.GroupBy>>) (
          avg_over_time(node_memory_MemTotal_bytes{<<.LabelMatchers>>}[3m])
          -
          avg_over_time(node_memory_MemAvailable_bytes{<<.LabelMatchers>>}[3m])
        )
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    window: 3m